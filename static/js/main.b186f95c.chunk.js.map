{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","settingPostId","postId","togglerButton","idOfPost","className","map","post","title","id","type","onClick","BASE_URL","getUserPosts","userId","a","fetch","response","json","getUsers","users","getSelectedPost","getComments","comment","addComments","method","body","JSON","stringify","headers","addedComment","removeComment","commentId","deletedComment","NewCommentForm","requestComments","addingComment","value","console","log","packComment","name","email","initialValues","onSubmit","values","actions","resetForm","htmlFor","placeholder","as","PostDetails","useState","setPost","comments","setComments","showComments","setShowComments","then","commentsFromServer","useEffect","postFromServer","state","idOfComment","App","setUserId","allUsers","setAllUsers","setPosts","setPostId","usersFromServer","postsFromServer","onChange","event","target","serverUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b186f95c.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  settingPostId: (id: number) => void,\n  postId: number,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  settingPostId,\n  postId,\n}) => {\n  const togglerButton = (idOfPost: number) => {\n    settingPostId(idOfPost);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              {post.title}\n            </div>\n            {postId === post.id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  togglerButton(0);\n                }}\n              >\n                <p>Close</p>\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  togglerButton(post.id);\n                }}\n              >\n                <p>Open</p>\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getUserPosts = async (userId: number): Promise<Post[]> => {\n  const response = userId\n    ? await fetch(`${BASE_URL}/posts?userId=${userId}`)\n    : await fetch(`${BASE_URL}/posts`);\n\n  const posts = await response.json();\n\n  return posts;\n};\n\nexport const getUsers = async (): Promise<User[]> => {\n  const response = await fetch(`${BASE_URL}/users`);\n  const users = await response.json();\n\n  return users;\n};\n\nexport const getSelectedPost = async (postId: number): Promise<Post> => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n  const post = await response.json();\n\n  return post;\n};\n\nexport const getComments = async (\n  postId: number,\n): Promise<CommentWithId[]> => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n  const comment = await response.json();\n\n  return comment;\n};\n\nexport const addComments = async (\n  comment: CommentFetch,\n): Promise<CommentFetch[]> => {\n  const response = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    body: JSON.stringify(comment),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n    // .then(response => response.json())\n\n  const addedComment = await response.json();\n\n  return addedComment;\n};\n\nexport const removeComment = async (commentId: number) => {\n  const response = await fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n  const deletedComment = await response.json();\n\n  return deletedComment;\n};\n","import React from 'react';\nimport './NewCommentForm.scss';\n\nimport { Formik, Form, Field } from 'formik';\nimport { addComments } from '../../api/api';\n\ninterface MyFormValues {\n  name: string,\n  email: string,\n  body: string,\n}\n\ntype Props = {\n  postId: number,\n  requestComments: () => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  requestComments,\n}) => {\n  const initialValues: MyFormValues = {\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const addingComment = async (value: MyFormValues) => {\n    // eslint-disable-next-line no-console\n    console.log(value);\n\n    const packComment = {\n      postId,\n      name: value.name,\n      email: value.email,\n      body: value.body,\n    };\n\n    await addComments(packComment);\n    requestComments();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={(values, actions) => {\n          // eslint-disable-next-line no-console\n          console.log({ values, actions });\n\n          addingComment(values);\n          actions.resetForm();\n        }}\n\n      >\n        <Form className=\"NewCommentForm\">\n          <div className=\"form-field\">\n            <label htmlFor=\"name\">\n              <Field\n                id=\"name\"\n                name=\"name\"\n                placeholder=\"Your name\"\n                className=\"NewCommentForm__input\"\n              />\n            </label>\n          </div>\n\n          <div className=\"form-field\">\n            <label htmlFor=\"email\">\n              <Field\n                id=\"email\"\n                name=\"email\"\n                placeholder=\"Your email\"\n                className=\"NewCommentForm__input\"\n              />\n            </label>\n          </div>\n\n          <div className=\"form-field\">\n            <label htmlFor=\"body\">\n              <Field\n                as=\"textarea\"\n                id=\"body\"\n                name=\"body\"\n                placeholder=\"Type comment here\"\n                className=\"NewCommentForm__input\"\n              />\n            </label>\n          </div>\n          <button\n            type=\"submit\"\n            className=\"NewCommentForm__submit-button button\"\n          >\n            Submit\n          </button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getSelectedPost, getComments, removeComment } from '../../api/api';\n\ntype Props = {\n  postId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [post, setPost] = useState<Post>();\n  const [comments, setComments] = useState<CommentWithId[]>([]);\n  const [showComments, setShowComments] = useState(true);\n\n  const requestComments = () => {\n    getComments(postId)\n      .then(commentsFromServer => setComments(commentsFromServer));\n  };\n\n  useEffect(() => {\n    getSelectedPost(postId)\n      .then(postFromServer => setPost(postFromServer));\n    requestComments();\n  }, [postId]);\n\n  const deletingComment = (idOfComment: number) => {\n    removeComment(idOfComment)\n      .then(() => requestComments());\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post && post.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setShowComments(state => !state);\n          }}\n        >\n          {showComments\n            ? 'Hide comments'\n            : 'Show comments'}\n        </button>\n\n        {showComments && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => {\n                    deletingComment(comment.id);\n                  }}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n            requestComments={requestComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts, getUsers } from './api/api';\n\nconst App: React.FC = () => {\n  const [userId, setUserId] = useState(0);\n  const [allUsers, setAllUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  const [postId, setPostId] = useState(0);\n\n  const settingPostId = (id: number) => {\n    setPostId(id);\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(usersFromServer => {\n        setAllUsers(usersFromServer);\n      });\n  }, []);\n\n  useEffect(() => {\n    getUserPosts(userId)\n      .then(postsFromServer => {\n        setPosts(postsFromServer);\n      });\n  }, [userId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={(event) => {\n              setUserId(+event.target.value);\n            }}\n          >\n            <option value={0}>All users</option>\n\n            {allUsers.map(serverUser => (\n              <option\n                value={serverUser.id}\n                key={serverUser.id}\n              >\n                {`${serverUser.name}`}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            settingPostId={settingPostId}\n            postId={postId}\n          />\n        </div>\n        {!!postId && (\n          <div className=\"App__content\">\n            <PostDetails\n              postId={postId}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}